AWSTemplateFormatVersion: '2010-09-09'
Description: 'OpenAI OPA Policy Generator - Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key
    MinLength: 1

Resources:
  # Secrets Manager for OpenAI API Key
  OpenAIApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}-openai-api-key'
      Description: 'OpenAI API Key for OPA Policy Generator'
      SecretString: !Sub |
        {
          "api_key": "${OpenAIApiKey}"
        }

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-openai-opa-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OpenAIApiKeySecret

  # Lambda Function
  OPAPolicyGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-openai-opa-generator'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          OPENAI_SECRET_ARN: !Ref OpenAIApiKeySecret
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Function created, code will be deployed separately' })
            };
          };

  # API Gateway HTTP API
  OPAGeneratorAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${Environment}-openai-opa-api'
      Description: 'OpenAI OPA Policy Generator API'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowOrigins:
          - http://localhost:5173
          - http://localhost:3000
        MaxAge: 300

  # API Gateway Integration
  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref OPAGeneratorAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OPAPolicyGeneratorFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  # API Gateway Routes
  GeneratePolicyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OPAGeneratorAPI
      RouteKey: 'POST /generate-policy'
      Target: !Sub 'integrations/${LambdaIntegration}'

  HealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref OPAGeneratorAPI
      RouteKey: 'GET /health'
      Target: !Sub 'integrations/${LambdaIntegration}'

  # API Gateway Stage
  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref OPAGeneratorAPI
      StageName: !Ref Environment
      AutoDeploy: true
      DefaultRouteSettings:
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50

  # Lambda Permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OPAPolicyGeneratorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OPAGeneratorAPI}/*/*'

Outputs:
  APIEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${OPAGeneratorAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${Environment}-openai-opa-api-endpoint'

  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref OPAPolicyGeneratorFunction
    Export:
      Name: !Sub '${Environment}-openai-opa-lambda-name'

  SecretArn:
    Description: 'OpenAI API Key Secret ARN'
    Value: !Ref OpenAIApiKeySecret
    Export:
      Name: !Sub '${Environment}-openai-secret-arn'
